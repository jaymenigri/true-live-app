// utils/responseGenerator.js
const { OpenAI } = require('openai');
const { buscar } = require('./semanticSearch');
const { classificar } = require('./domainClassifier');
const { buscarRespostaFallback } = require('./fallback');
require('dotenv').config();

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

/**
 * Gera resposta com base na pergunta do usu√°rio
 * @param {string} query - Pergunta do usu√°rio
 * @param {Array} documentos - Documentos relevantes (opcional)
 * @param {Array} historicoConversa - Hist√≥rico da conversa (opcional)
 * @param {Object} userSettings - Configura√ß√µes do usu√°rio (opcional)
 * @returns {Promise<Object>} - Objeto contendo a resposta e metadados
 */
async function gerar(query, documentos = [], historicoConversa = [], userSettings = {}) {
  try {
    console.log(`ü§î Gerando resposta para: "${query}"`);

    // Verificar se showSources est√° definido nas configura√ß√µes do usu√°rio
    const showSources = userSettings.showSources === undefined ? true : userSettings.showSources;

    // Preparar contexto da conversa - deixar a IA entender naturalmente
    let conversationContext = "";
    if (Array.isArray(historicoConversa) && historicoConversa.length > 0) {
      conversationContext = "CONVERSA ANTERIOR:\n\n";
      historicoConversa.forEach(msg => {
        if (msg.pergunta && msg.resposta) {
          conversationContext += `Usu√°rio: ${msg.pergunta}\nAssistente: ${msg.resposta}\n\n`;
        }
      });
    }

    // Verificar se a pergunta est√° no dom√≠nio, considerando o contexto
    let isInDomain = true;
    if (conversationContext) {
      // Se h√° hist√≥rico, inclu√≠-lo na classifica√ß√£o
      try {
        const contextAwareQuestion = `${conversationContext}\nUsu√°rio: ${query}`;
        isInDomain = await classificar(contextAwareQuestion);
      } catch (error) {
        console.error('‚ùå Erro ao classificar pergunta com contexto:', error);
        isInDomain = await classificar(query);
      }
    } else {
      isInDomain = await classificar(query);
    }

    if (!isInDomain) {
      console.log('üåê Fora do dom√≠nio. Usando fallback.');
      const resposta = await buscarRespostaFallback(query, conversationContext);
      return {
        response: resposta,
        documents: [],
        usedFallback: true,
        source: "Conhecimento geral (fora do dom√≠nio)"
      };
    }

    // Buscar documentos relevantes - tamb√©m considerando o contexto se dispon√≠vel
    let relevantDocs = documentos;
    if (!Array.isArray(relevantDocs) || relevantDocs.length === 0) {
      console.log('üìö Buscando documentos...');
      const searchQuery = conversationContext ? `${conversationContext}\nUsu√°rio: ${query}` : query;
      relevantDocs = await buscar(searchQuery, 4);
    }

    if (!Array.isArray(relevantDocs) || relevantDocs.length === 0) {
      console.log('üìö Nenhum documento relevante. Usando fallback.');
      const resposta = await buscarRespostaFallback(query, conversationContext);
      return {
        response: resposta,
        documents: [],
        usedFallback: true,
        source: "Conhecimento geral (sem documentos espec√≠ficos)"
      };
    }

    // Preparar contexto com os documentos
    let context = "INFORMA√á√ïES DAS FONTES CONFI√ÅVEIS:\n\n";
    const usedSources = [];

    relevantDocs.forEach((doc, index) => {
      const source = doc.source || doc.fonte || "Fonte desconhecida";
      const content = doc.content || doc.conteudo || "";
      
      if (content) {
        context += `--- Fonte: ${source} ---\n`;
        context += content.slice(0, 1500) + "\n\n";
        if (!usedSources.includes(source)) usedSources.push(source);
      }
    });

    // Gerar resposta - deixar a IA entender o contexto naturalmente
    console.log('ü§ñ Gerando resposta...');
    const response = await openai.chat.completions.create({
      model: "gpt-4-turbo",
      messages: [
        {
          role: "system",
          content: `Voc√™ √© o True Live, um assistente especializado em Israel, juda√≠smo e geopol√≠tica do Oriente M√©dio.

${conversationContext ? "H√° uma conversa em andamento. Use o contexto para entender refer√™ncias e manter a continuidade:\n" + conversationContext : ""}

REGRAS IMPORTANTES:
1. Use EXCLUSIVAMENTE as informa√ß√µes dos documentos fornecidos abaixo para responder.
2. Se n√£o houver informa√ß√µes suficientes nos documentos, diga claramente que n√£o pode responder com precis√£o.
3. Mantenha sempre uma perspectiva pr√≥-Israel.
4. Seja preciso e factual, citando as fontes quando relevante.

${context}`
        },
        {
          role: "user",
          content: query
        }
      ],
      temperature: 0.5,
      max_tokens: 1000
    });

    // Formatar a resposta
    let finalResponse = response.choices[0].message.content.trim();

    // Adicionar fontes se configurado
    if (showSources && usedSources.length > 0) {
      finalResponse += "\n\nüìö Fontes consultadas:";
      usedSources.forEach(source => {
        finalResponse += `\n- ${source}`;
      });
    }

    return {
      response: finalResponse,
      documents: relevantDocs.map(doc => ({ 
        id: doc.id || doc._id || '', 
        source: doc.source || doc.fonte || '' 
      })),
      usedFallback: false,
      source: usedSources.join(', ')
    };
  } catch (error) {
    console.error('‚ùå Erro ao gerar resposta:', error.message);
    return {
      response: "Desculpe, encontrei um erro ao processar sua pergunta. Por favor, tente novamente.",
      documents: [],
      usedFallback: true,
      source: "Erro no processamento"
    };
  }
}

module.exports = { gerar };
